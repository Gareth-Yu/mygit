






$ git --help
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one，

work on the current change (see also: git help everyday)
   add               Add file contents to the index									
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local branch
   push              Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.


$ git config --global user.name "Gareth"               
$ git config --global user.emain "1048174150@qq.com"


创建一个版本库
	$ mkdir learngit
	$ cd learngit
	$ pwd
	$ git init   通过git init命令把这个目录变成Git可以管理的仓库

添加文件到Git仓库，分两步：

	使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	使用命令git commit -m <message>，完成。

Q：输入git add readme.txt，得到错误：fatal: not a git repository (or any of the parent directories)。
A：Git命令必须在Git仓库目录内执行（git init除外），在仓库目录外执行是没有意义的。

Q：输入git add readme.txt，得到错误fatal: pathspec 'readme.txt' did not match any files。
A：添加某个文件时，该文件必须在当前目录下存在，用ls或者dir命令查看当前目录的文件，看看文件是否存在，或者是否写错了文件名。


$ git log  命令显示从最近到最远的提交日志
$ git log --pretty=oneline


$ git reset --hard HEAD^   
在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

Git提供了一个命令git reflog用来记录你的每一次命令：
现在总结一下：
	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。




暂存区是Git非常重要的概念

把文件往Git版本库里添加的时候，是分两步执行的：
	第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
	第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。

$ git status  查看状态


提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：
Git是如何跟踪修改的，每次修改，如果不用git add到暂存区，那就不会加入到commit中。


管理修改

git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。
用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区：
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。


删除文件

一般情况下，通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：
	一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：
	另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
		git reset  <file>
		$ git checkout -- test.txt

git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

使用下面的命令顺序可以找回删除的文件：

	【git log --pretty=oneline】查看提交的版本日志 → 【git reset commitID test.txt】  → 【git checkout -- test.txt】将文件从暂存区拿回到工作区


		因为你用的是【git rm】命令来删除的文件，这个命令是删除了Git暂存区的test.txt文件，此时你再用【git checkout -- <filename>】命令的话，Git就会提示你匹配不到文件。

		。【git checkout -- <filename>】：是将工作区恢复成暂存区样子；

		你必须先使用【git reset  <file>】命令，将删除的文件从Git版本库拉回到你的暂存区中，然后再使用【git checkout -- <filename>】命令来将该文件拉回到你的工作区中。

		* 请注意1：【git reset  HEAD <file>】命令，如果HEAD上也没有这个test.txt文件的话，执行该命令后Git同样会报错，提示你匹配不到文件。原因是你按照廖老师的学习步骤学习的：

		【git rm <file>】删除文件 → 【git add 'add test.txt'】暂存本次删除申请 → 【git commit -m'remove test.txt'】提交本次删除申请到HEAD

		所以，如果你直接使用命令【git reset  HEAD test.txt】想想问什么会提示你匹配不到文件呢？因为现在HEAD上已经没有这个test.txt文件了！

		怎么办呢？我们使用下面的命令顺序可以找回删除的文件：

		【git log --pretty=oneline】查看提交的版本日志 → 【git reset commitID test.txt】这里的commitID使用的是'add test.txt'这次的提交ID → 【git checkout -- test.txt】将文件从暂存区拿回到工作区

		* 请注意2：如果在'add test.txt'中间对test.txt有多次修改，并且没有提交被Git管理起来的话，这些修改就都丢失了！


连接远程管理github

	在GitHub中，添加一个repo, 然后选择SSH， 在设置中选择SSH设置，把下面key添加进去

		$ ssh-keygen -t rsa -C "1048174150@qq.com"
		$ git remote set-url origin git@github.com:Gareth-Yu/mygit.git
		$ git branch -M master
		$ git push -u origin master


远程库已经准备好了，下一步是用命令git clone克隆一个本地库
	$ git clone git@github.com:michaelliao/gitskills.git
	
	
	
创建分支

	
	
	
	
	
	
	
	
	
	
	

